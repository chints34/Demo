C51 COMPILER V7.08   I2CTEST                                                               10/12/2010 02:35:21 PAGE 1   


C51 COMPILER V7.08, COMPILATION OF MODULE I2CTEST
OBJECT MODULE PLACED IN C:\ISP's\i2ctest.obj
COMPILER INVOKED BY: C:\Keil2\C51\BIN\C51.EXE i2ctest.c BROWSE DEBUG OBJECTEXTEND OBJECT(C:\ISP's\i2ctest.obj)

line level    source

   1          #include<reg51.h>
   2          #include"delay.h"
   3          #include"uart.h"
   4          #include"lcdtest.h"
   5          sbit SCL=P3^0;
   6          sbit SDA=P3^1;
   7          
   8          /*
   9          void i2c_start(void);
  10          void i2c_write(unsigned  char dat);
  11          void i2c_ack(void);
  12          
  13          void i2c_stop(void);
  14          char i2c_read(void);
  15          void i2c_nock(void);
  16          */
  17          extern unsigned char ch;
  18          char buff;
  19          void i2c_start(void)
  20          {
  21   1              SCL=1;
  22   1          SDA=1;
  23   1              SDA=0;
  24   1      }
  25          
  26          void i2c_write(unsigned char dat)
  27          {
  28   1              char i;
  29   1              for(i=0;i<8;i++)
  30   1              {
  31   2                      SCL=0;
  32   2                      SDA=(dat&(0x80>>i))?1:0;
  33   2                      SCL=1;
  34   2              }
  35   1      }
  36          
  37          
  38          void i2c_ack(void)
  39          {
  40   1              SCL=0;
  41   1              SDA=1;
  42   1              SCL=1;
  43   1              SCL=0;
  44   1      }
  45          
  46          
  47          void i2c_stop(void)
  48          {
  49   1              SCL=0;
  50   1              SDA=0;
  51   1              SCL=1;
  52   1              SDA=1;
  53   1      
  54   1      }
  55          
C51 COMPILER V7.08   I2CTEST                                                               10/12/2010 02:35:21 PAGE 2   

  56          
  57          unsigned char i2c_read()
  58          {
  59   1              unsigned char i,buff=0;
  60   1      //      SDA=1;
  61   1              for(i=0;i<8;i++)
  62   1              {
  63   2                      SCL=1;
  64   2                      if(SDA)
  65   2                      {
  66   3                              buff|=((0x80)>>i);
  67   3                      }
  68   2                      SCL=0;
  69   2              }
  70   1              return buff;
  71   1      }
  72          
  73          
  74          void i2c_noack(void)
  75          {
  76   1              SCL=0;
  77   1              SDA=1;
  78   1          SCL=1;
  79   1              //SCL=0;
  80   1      }
  81          
  82          
  83          void eeprom_write(unsigned char sa,unsigned char add,unsigned char dat)
  84          {
  85   1              i2c_start();
  86   1              i2c_write(sa);
  87   1              i2c_ack();
  88   1              i2c_write(add);
  89   1              i2c_ack();
  90   1              i2c_write(dat);
  91   1              i2c_ack();
  92   1              i2c_stop();
  93   1              delay_ms(10);
  94   1      }
  95          
  96          
  97          unsigned  eeprom_read(unsigned char sa,unsigned char add)
  98          {
  99   1              unsigned char buff1;
 100   1              i2c_start();
 101   1              i2c_write(sa);
 102   1              i2c_ack();
 103   1              i2c_write(add);
 104   1              i2c_ack();
 105   1              i2c_start();
 106   1              i2c_write(sa|0x01);
 107   1              i2c_ack();
 108   1              buff1=i2c_read();
 109   1              i2c_noack();
 110   1              i2c_stop();
 111   1              return(buff1);
 112   1      }
 113          
 114          //I2C TEST FUNCTION
 115          void i2c_test()
 116          {
 117   1      
C51 COMPILER V7.08   I2CTEST                                                               10/12/2010 02:35:21 PAGE 3   

 118   1                              
 119   1              l7:             print("I2C TESTING\n\r");
 120   1                              print("connect lcd(PO to D0-D7) and P2.1-P2.3 to rs,rw,en and connect scl to P3.0 and sda to P3.1\n\r")
             -; 
 121   1                              print("PRESS ENTER TO CONTINUE AFTER HARDWARE CONNECTION\n\r");
 122   1                              
 123   1                              uart_rx();
 124   1                                      
 125   1                              //      if(ch==0x0d)
 126   1                              //      {
 127   1                                              init_lcd();
 128   1                                              disp_lcd('C');
 129   1                                              
 130   1                                              eeprom_write(0xa0,0x03,'c');
 131   1                                              delay_ms(1000);
 132   1                                              cmd_lcd(0xc0);
 133   1                                              buff=eeprom_read(0xa0,0x03);
 134   1                                              disp_lcd(buff);
 135   1                                              
 136   1                                              print("IS TX and RX ARE WORKING PROPERLY... ???\n\r");
 137   1                                          print("Press y-YES (or) n-N0  (or)  e-Exit\n\r");
 138   1                                              print("\n\r");
 139   1                                              ch=uart_rx();
 140   1                                              if(ch=='y')
 141   1                                              {
 142   2                                                      print("Do you want to continue?\n\r");
 143   2                                                      print("Press y-YES (or) n-N0  (or)  e-Exit\n\r");
 144   2                                                      ch=uart_rx();
 145   2                                                      if(ch=='y')
 146   2                                                              goto l7;
 147   2                                                      else if((ch=='n')|(ch=='e'))
 148   2                                                      {
 149   3                                                              P0=0x0f;
 150   3                                                              return;
 151   3                                                      }
 152   2                                                      else
 153   2                                                              print("plz press valid key to continue\n\r");
 154   2                                              }
 155   1                                              else if(ch=='n')
 156   1                                              {
 157   2                                                      print("following are the possibilities of the error:-\n\r");
 158   2                                              
 159   2                                                      print("\n\r");
 160   2                                                                                              
 161   2                                                      print("1.program logic\n\r");
 162   2                                      
 163   2                                                      print("2.hardware conection\n\r");
 164   2                                      
 165   2                                                      print("3.check with the other (KEYPAD OR KIT)component n verify WHETHER IT remainS closeD or ON\n\r"
             -);
 166   2                                      
 167   2                                              }
 168   1                                              else if(ch=='e')
 169   1                                                      return;
 170   1                              //      }
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    406    ----
   CONSTANT SIZE    =    485    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V7.08   I2CTEST                                                               10/12/2010 02:35:21 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
